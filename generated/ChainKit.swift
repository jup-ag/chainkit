// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ChainKitFFI)
import ChainKitFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_chainkit_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_chainkit_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public struct ChainPrivateKey {
    public var contents: String
    public var publicKey: ChainPublicKey

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        contents: String, 
        publicKey: ChainPublicKey) {
        self.contents = contents
        self.publicKey = publicKey
    }
}


extension ChainPrivateKey: Equatable, Hashable {
    public static func ==(lhs: ChainPrivateKey, rhs: ChainPrivateKey) -> Bool {
        if lhs.contents != rhs.contents {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contents)
        hasher.combine(publicKey)
    }
}


public struct FfiConverterTypeChainPrivateKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChainPrivateKey {
        return
            try ChainPrivateKey(
                contents: FfiConverterString.read(from: &buf), 
                publicKey: FfiConverterTypeChainPublicKey.read(from: &buf)
        )
    }

    public static func write(_ value: ChainPrivateKey, into buf: inout [UInt8]) {
        FfiConverterString.write(value.contents, into: &buf)
        FfiConverterTypeChainPublicKey.write(value.publicKey, into: &buf)
    }
}


public func FfiConverterTypeChainPrivateKey_lift(_ buf: RustBuffer) throws -> ChainPrivateKey {
    return try FfiConverterTypeChainPrivateKey.lift(buf)
}

public func FfiConverterTypeChainPrivateKey_lower(_ value: ChainPrivateKey) -> RustBuffer {
    return FfiConverterTypeChainPrivateKey.lower(value)
}


public struct ChainPublicKey {
    public var contents: String
    public var chain: Blockchain

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        contents: String, 
        chain: Blockchain) {
        self.contents = contents
        self.chain = chain
    }
}


extension ChainPublicKey: Equatable, Hashable {
    public static func ==(lhs: ChainPublicKey, rhs: ChainPublicKey) -> Bool {
        if lhs.contents != rhs.contents {
            return false
        }
        if lhs.chain != rhs.chain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contents)
        hasher.combine(chain)
    }
}


public struct FfiConverterTypeChainPublicKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChainPublicKey {
        return
            try ChainPublicKey(
                contents: FfiConverterString.read(from: &buf), 
                chain: FfiConverterTypeBlockchain.read(from: &buf)
        )
    }

    public static func write(_ value: ChainPublicKey, into buf: inout [UInt8]) {
        FfiConverterString.write(value.contents, into: &buf)
        FfiConverterTypeBlockchain.write(value.chain, into: &buf)
    }
}


public func FfiConverterTypeChainPublicKey_lift(_ buf: RustBuffer) throws -> ChainPublicKey {
    return try FfiConverterTypeChainPublicKey.lift(buf)
}

public func FfiConverterTypeChainPublicKey_lower(_ value: ChainPublicKey) -> RustBuffer {
    return FfiConverterTypeChainPublicKey.lower(value)
}


public struct ChainTransaction {
    public var tx: String
    public var signers: [ChainPublicKey]
    public var fullSignature: String?
    public var signatures: [String]?
    public var accounts: [ChainPublicKey]
    public var instructionPrograms: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        tx: String, 
        signers: [ChainPublicKey], 
        fullSignature: String?, 
        signatures: [String]?, 
        accounts: [ChainPublicKey], 
        instructionPrograms: [String]) {
        self.tx = tx
        self.signers = signers
        self.fullSignature = fullSignature
        self.signatures = signatures
        self.accounts = accounts
        self.instructionPrograms = instructionPrograms
    }
}


extension ChainTransaction: Equatable, Hashable {
    public static func ==(lhs: ChainTransaction, rhs: ChainTransaction) -> Bool {
        if lhs.tx != rhs.tx {
            return false
        }
        if lhs.signers != rhs.signers {
            return false
        }
        if lhs.fullSignature != rhs.fullSignature {
            return false
        }
        if lhs.signatures != rhs.signatures {
            return false
        }
        if lhs.accounts != rhs.accounts {
            return false
        }
        if lhs.instructionPrograms != rhs.instructionPrograms {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tx)
        hasher.combine(signers)
        hasher.combine(fullSignature)
        hasher.combine(signatures)
        hasher.combine(accounts)
        hasher.combine(instructionPrograms)
    }
}


public struct FfiConverterTypeChainTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChainTransaction {
        return
            try ChainTransaction(
                tx: FfiConverterString.read(from: &buf), 
                signers: FfiConverterSequenceTypeChainPublicKey.read(from: &buf), 
                fullSignature: FfiConverterOptionString.read(from: &buf), 
                signatures: FfiConverterOptionSequenceString.read(from: &buf), 
                accounts: FfiConverterSequenceTypeChainPublicKey.read(from: &buf), 
                instructionPrograms: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: ChainTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.tx, into: &buf)
        FfiConverterSequenceTypeChainPublicKey.write(value.signers, into: &buf)
        FfiConverterOptionString.write(value.fullSignature, into: &buf)
        FfiConverterOptionSequenceString.write(value.signatures, into: &buf)
        FfiConverterSequenceTypeChainPublicKey.write(value.accounts, into: &buf)
        FfiConverterSequenceString.write(value.instructionPrograms, into: &buf)
    }
}


public func FfiConverterTypeChainTransaction_lift(_ buf: RustBuffer) throws -> ChainTransaction {
    return try FfiConverterTypeChainTransaction.lift(buf)
}

public func FfiConverterTypeChainTransaction_lower(_ value: ChainTransaction) -> RustBuffer {
    return FfiConverterTypeChainTransaction.lower(value)
}


public struct DecimalNumber {
    public var value: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        value: String) {
        self.value = value
    }
}


extension DecimalNumber: Equatable, Hashable {
    public static func ==(lhs: DecimalNumber, rhs: DecimalNumber) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
    }
}


public struct FfiConverterTypeDecimalNumber: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecimalNumber {
        return
            try DecimalNumber(
                value: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DecimalNumber, into buf: inout [UInt8]) {
        FfiConverterString.write(value.value, into: &buf)
    }
}


public func FfiConverterTypeDecimalNumber_lift(_ buf: RustBuffer) throws -> DecimalNumber {
    return try FfiConverterTypeDecimalNumber.lift(buf)
}

public func FfiConverterTypeDecimalNumber_lower(_ value: DecimalNumber) -> RustBuffer {
    return FfiConverterTypeDecimalNumber.lower(value)
}


public struct Derivation {
    public var start: UInt32
    public var count: UInt32
    public var path: DerivationPath

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        start: UInt32, 
        count: UInt32, 
        path: DerivationPath) {
        self.start = start
        self.count = count
        self.path = path
    }
}


extension Derivation: Equatable, Hashable {
    public static func ==(lhs: Derivation, rhs: Derivation) -> Bool {
        if lhs.start != rhs.start {
            return false
        }
        if lhs.count != rhs.count {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(start)
        hasher.combine(count)
        hasher.combine(path)
    }
}


public struct FfiConverterTypeDerivation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Derivation {
        return
            try Derivation(
                start: FfiConverterUInt32.read(from: &buf), 
                count: FfiConverterUInt32.read(from: &buf), 
                path: FfiConverterTypeDerivationPath.read(from: &buf)
        )
    }

    public static func write(_ value: Derivation, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.start, into: &buf)
        FfiConverterUInt32.write(value.count, into: &buf)
        FfiConverterTypeDerivationPath.write(value.path, into: &buf)
    }
}


public func FfiConverterTypeDerivation_lift(_ buf: RustBuffer) throws -> Derivation {
    return try FfiConverterTypeDerivation.lift(buf)
}

public func FfiConverterTypeDerivation_lower(_ value: Derivation) -> RustBuffer {
    return FfiConverterTypeDerivation.lower(value)
}


public struct DerivedPrivateKey {
    public var contents: String
    public var publicKey: ChainPublicKey
    public var index: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        contents: String, 
        publicKey: ChainPublicKey, 
        index: UInt32) {
        self.contents = contents
        self.publicKey = publicKey
        self.index = index
    }
}


extension DerivedPrivateKey: Equatable, Hashable {
    public static func ==(lhs: DerivedPrivateKey, rhs: DerivedPrivateKey) -> Bool {
        if lhs.contents != rhs.contents {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.index != rhs.index {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contents)
        hasher.combine(publicKey)
        hasher.combine(index)
    }
}


public struct FfiConverterTypeDerivedPrivateKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DerivedPrivateKey {
        return
            try DerivedPrivateKey(
                contents: FfiConverterString.read(from: &buf), 
                publicKey: FfiConverterTypeChainPublicKey.read(from: &buf), 
                index: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: DerivedPrivateKey, into buf: inout [UInt8]) {
        FfiConverterString.write(value.contents, into: &buf)
        FfiConverterTypeChainPublicKey.write(value.publicKey, into: &buf)
        FfiConverterUInt32.write(value.index, into: &buf)
    }
}


public func FfiConverterTypeDerivedPrivateKey_lift(_ buf: RustBuffer) throws -> DerivedPrivateKey {
    return try FfiConverterTypeDerivedPrivateKey.lift(buf)
}

public func FfiConverterTypeDerivedPrivateKey_lower(_ value: DerivedPrivateKey) -> RustBuffer {
    return FfiConverterTypeDerivedPrivateKey.lower(value)
}


public struct ExternalAddress {
    public var recentBlockhash: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        recentBlockhash: String) {
        self.recentBlockhash = recentBlockhash
    }
}


extension ExternalAddress: Equatable, Hashable {
    public static func ==(lhs: ExternalAddress, rhs: ExternalAddress) -> Bool {
        if lhs.recentBlockhash != rhs.recentBlockhash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(recentBlockhash)
    }
}


public struct FfiConverterTypeExternalAddress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExternalAddress {
        return
            try ExternalAddress(
                recentBlockhash: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ExternalAddress, into buf: inout [UInt8]) {
        FfiConverterString.write(value.recentBlockhash, into: &buf)
    }
}


public func FfiConverterTypeExternalAddress_lift(_ buf: RustBuffer) throws -> ExternalAddress {
    return try FfiConverterTypeExternalAddress.lift(buf)
}

public func FfiConverterTypeExternalAddress_lower(_ value: ExternalAddress) -> RustBuffer {
    return FfiConverterTypeExternalAddress.lower(value)
}


public struct MnemonicWords {
    public var words: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        words: [String]) {
        self.words = words
    }
}


extension MnemonicWords: Equatable, Hashable {
    public static func ==(lhs: MnemonicWords, rhs: MnemonicWords) -> Bool {
        if lhs.words != rhs.words {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(words)
    }
}


public struct FfiConverterTypeMnemonicWords: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MnemonicWords {
        return
            try MnemonicWords(
                words: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: MnemonicWords, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.words, into: &buf)
    }
}


public func FfiConverterTypeMnemonicWords_lift(_ buf: RustBuffer) throws -> MnemonicWords {
    return try FfiConverterTypeMnemonicWords.lift(buf)
}

public func FfiConverterTypeMnemonicWords_lower(_ value: MnemonicWords) -> RustBuffer {
    return FfiConverterTypeMnemonicWords.lower(value)
}


public struct ParsedTransaction {
    public var from: ChainPublicKey?
    public var to: ChainPublicKey
    public var data: TransactionData

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        from: ChainPublicKey?, 
        to: ChainPublicKey, 
        data: TransactionData) {
        self.from = from
        self.to = to
        self.data = data
    }
}


extension ParsedTransaction: Equatable, Hashable {
    public static func ==(lhs: ParsedTransaction, rhs: ParsedTransaction) -> Bool {
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(data)
    }
}


public struct FfiConverterTypeParsedTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParsedTransaction {
        return
            try ParsedTransaction(
                from: FfiConverterOptionTypeChainPublicKey.read(from: &buf), 
                to: FfiConverterTypeChainPublicKey.read(from: &buf), 
                data: FfiConverterTypeTransactionData.read(from: &buf)
        )
    }

    public static func write(_ value: ParsedTransaction, into buf: inout [UInt8]) {
        FfiConverterOptionTypeChainPublicKey.write(value.from, into: &buf)
        FfiConverterTypeChainPublicKey.write(value.to, into: &buf)
        FfiConverterTypeTransactionData.write(value.data, into: &buf)
    }
}


public func FfiConverterTypeParsedTransaction_lift(_ buf: RustBuffer) throws -> ParsedTransaction {
    return try FfiConverterTypeParsedTransaction.lift(buf)
}

public func FfiConverterTypeParsedTransaction_lower(_ value: ParsedTransaction) -> RustBuffer {
    return FfiConverterTypeParsedTransaction.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Blockchain {
    
    case solana
}

public struct FfiConverterTypeBlockchain: FfiConverterRustBuffer {
    typealias SwiftType = Blockchain

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Blockchain {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .solana
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Blockchain, into buf: inout [UInt8]) {
        switch value {
        
        
        case .solana:
            writeInt(&buf, Int32(1))
        
        }
    }
}


public func FfiConverterTypeBlockchain_lift(_ buf: RustBuffer) throws -> Blockchain {
    return try FfiConverterTypeBlockchain.lift(buf)
}

public func FfiConverterTypeBlockchain_lower(_ value: Blockchain) -> RustBuffer {
    return FfiConverterTypeBlockchain.lower(value)
}


extension Blockchain: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum DerivationPath {
    
    case bip44Root
    case bip44
    case bip44Change
    case deprecated
}

public struct FfiConverterTypeDerivationPath: FfiConverterRustBuffer {
    typealias SwiftType = DerivationPath

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DerivationPath {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bip44Root
        
        case 2: return .bip44
        
        case 3: return .bip44Change
        
        case 4: return .deprecated
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DerivationPath, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bip44Root:
            writeInt(&buf, Int32(1))
        
        
        case .bip44:
            writeInt(&buf, Int32(2))
        
        
        case .bip44Change:
            writeInt(&buf, Int32(3))
        
        
        case .deprecated:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeDerivationPath_lift(_ buf: RustBuffer) throws -> DerivationPath {
    return try FfiConverterTypeDerivationPath.lift(buf)
}

public func FfiConverterTypeDerivationPath_lower(_ value: DerivationPath) -> RustBuffer {
    return FfiConverterTypeDerivationPath.lower(value)
}


extension DerivationPath: Equatable, Hashable {}




public enum EncryptionError {

    
    
    case Generic(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeEncryptionError.lift(error)
    }
}


public struct FfiConverterTypeEncryptionError: FfiConverterRustBuffer {
    typealias SwiftType = EncryptionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EncryptionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EncryptionError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension EncryptionError: Equatable, Hashable {}

extension EncryptionError: Error { }


public enum KeyError {

    
    
    case InvalidKeypair(message: String)
    
    case InvalidMnemonic(message: String)
    
    case DerivationPath(message: String)
    
    case PrivateKey(message: String)
    
    case PublicKey(message: String)
    
    case Generic(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeKeyError.lift(error)
    }
}


public struct FfiConverterTypeKeyError: FfiConverterRustBuffer {
    typealias SwiftType = KeyError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidKeypair(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .InvalidMnemonic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DerivationPath(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .PrivateKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .PublicKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidKeypair(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .InvalidMnemonic(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DerivationPath(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .PrivateKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .PublicKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))

        
        }
    }
}


extension KeyError: Equatable, Hashable {}

extension KeyError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SolanaTransactionType {
    
    case legacy
    case versioned
}

public struct FfiConverterTypeSolanaTransactionType: FfiConverterRustBuffer {
    typealias SwiftType = SolanaTransactionType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SolanaTransactionType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .legacy
        
        case 2: return .versioned
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SolanaTransactionType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .legacy:
            writeInt(&buf, Int32(1))
        
        
        case .versioned:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeSolanaTransactionType_lift(_ buf: RustBuffer) throws -> SolanaTransactionType {
    return try FfiConverterTypeSolanaTransactionType.lift(buf)
}

public func FfiConverterTypeSolanaTransactionType_lower(_ value: SolanaTransactionType) -> RustBuffer {
    return FfiConverterTypeSolanaTransactionType.lower(value)
}


extension SolanaTransactionType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TokenDestination {
    
    case account(
        transferDestination: String
    )
    case wallet(
        publicKey: ChainPublicKey
    )
}

public struct FfiConverterTypeTokenDestination: FfiConverterRustBuffer {
    typealias SwiftType = TokenDestination

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TokenDestination {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .account(
            transferDestination: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .wallet(
            publicKey: try FfiConverterTypeChainPublicKey.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TokenDestination, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .account(transferDestination):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(transferDestination, into: &buf)
            
        
        case let .wallet(publicKey):
            writeInt(&buf, Int32(2))
            FfiConverterTypeChainPublicKey.write(publicKey, into: &buf)
            
        }
    }
}


public func FfiConverterTypeTokenDestination_lift(_ buf: RustBuffer) throws -> TokenDestination {
    return try FfiConverterTypeTokenDestination.lift(buf)
}

public func FfiConverterTypeTokenDestination_lower(_ value: TokenDestination) -> RustBuffer {
    return FfiConverterTypeTokenDestination.lower(value)
}


extension TokenDestination: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TransactionData {
    
    case solana
}

public struct FfiConverterTypeTransactionData: FfiConverterRustBuffer {
    typealias SwiftType = TransactionData

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionData {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .solana
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionData, into buf: inout [UInt8]) {
        switch value {
        
        
        case .solana:
            writeInt(&buf, Int32(1))
        
        }
    }
}


public func FfiConverterTypeTransactionData_lift(_ buf: RustBuffer) throws -> TransactionData {
    return try FfiConverterTypeTransactionData.lift(buf)
}

public func FfiConverterTypeTransactionData_lower(_ value: TransactionData) -> RustBuffer {
    return FfiConverterTypeTransactionData.lower(value)
}


extension TransactionData: Equatable, Hashable {}




public enum TransactionError {

    
    
    case KeyPair(message: String)
    
    case SignerMissing(message: String)
    
    case MultipleSigners(message: String)
    
    case PrivateKey(message: String)
    
    case PublicKey(message: String)
    
    case Parameters(message: String)
    
    case ParsingFailure(message: String)
    
    case InstructionError(message: String)
    
    case DecimalConversion(message: String)
    
    case SignMsgError(message: String)
    
    case Generic(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeTransactionError.lift(error)
    }
}


public struct FfiConverterTypeTransactionError: FfiConverterRustBuffer {
    typealias SwiftType = TransactionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .KeyPair(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SignerMissing(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .MultipleSigners(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .PrivateKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .PublicKey(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .Parameters(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .ParsingFailure(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .InstructionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .DecimalConversion(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .SignMsgError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .Generic(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .KeyPair(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SignerMissing(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .MultipleSigners(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .PrivateKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .PublicKey(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .Parameters(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .ParsingFailure(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .InstructionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .DecimalConversion(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .SignMsgError(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .Generic(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))

        
        }
    }
}


extension TransactionError: Equatable, Hashable {}

extension TransactionError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TransactionKind {
    
    case token(
        amount: DecimalNumber, 
        closeAccount: Bool
    )
    case nft(
        amount: UInt64, 
        id: String?
    )
}

public struct FfiConverterTypeTransactionKind: FfiConverterRustBuffer {
    typealias SwiftType = TransactionKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .token(
            amount: try FfiConverterTypeDecimalNumber.read(from: &buf), 
            closeAccount: try FfiConverterBool.read(from: &buf)
        )
        
        case 2: return .nft(
            amount: try FfiConverterUInt64.read(from: &buf), 
            id: try FfiConverterOptionString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .token(amount,closeAccount):
            writeInt(&buf, Int32(1))
            FfiConverterTypeDecimalNumber.write(amount, into: &buf)
            FfiConverterBool.write(closeAccount, into: &buf)
            
        
        case let .nft(amount,id):
            writeInt(&buf, Int32(2))
            FfiConverterUInt64.write(amount, into: &buf)
            FfiConverterOptionString.write(id, into: &buf)
            
        }
    }
}


public func FfiConverterTypeTransactionKind_lift(_ buf: RustBuffer) throws -> TransactionKind {
    return try FfiConverterTypeTransactionKind.lift(buf)
}

public func FfiConverterTypeTransactionKind_lower(_ value: TransactionKind) -> RustBuffer {
    return FfiConverterTypeTransactionKind.lower(value)
}


extension TransactionKind: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TransactionParameters {
    
    case solana(
        externalAddress: ExternalAddress?, 
        transactionType: SolanaTransactionType, 
        ownerProgram: String?, 
        decimals: UInt8?, 
        memo: String?, 
        references: [String], 
        swapSlippageBps: UInt16?, 
        computeBudgetUnitPrice: UInt64?, 
        computeBudgetUnitLimit: UInt32?
    )
}

public struct FfiConverterTypeTransactionParameters: FfiConverterRustBuffer {
    typealias SwiftType = TransactionParameters

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionParameters {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .solana(
            externalAddress: try FfiConverterOptionTypeExternalAddress.read(from: &buf), 
            transactionType: try FfiConverterTypeSolanaTransactionType.read(from: &buf), 
            ownerProgram: try FfiConverterOptionString.read(from: &buf), 
            decimals: try FfiConverterOptionUInt8.read(from: &buf), 
            memo: try FfiConverterOptionString.read(from: &buf), 
            references: try FfiConverterSequenceString.read(from: &buf), 
            swapSlippageBps: try FfiConverterOptionUInt16.read(from: &buf), 
            computeBudgetUnitPrice: try FfiConverterOptionUInt64.read(from: &buf), 
            computeBudgetUnitLimit: try FfiConverterOptionUInt32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionParameters, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .solana(externalAddress,transactionType,ownerProgram,decimals,memo,references,swapSlippageBps,computeBudgetUnitPrice,computeBudgetUnitLimit):
            writeInt(&buf, Int32(1))
            FfiConverterOptionTypeExternalAddress.write(externalAddress, into: &buf)
            FfiConverterTypeSolanaTransactionType.write(transactionType, into: &buf)
            FfiConverterOptionString.write(ownerProgram, into: &buf)
            FfiConverterOptionUInt8.write(decimals, into: &buf)
            FfiConverterOptionString.write(memo, into: &buf)
            FfiConverterSequenceString.write(references, into: &buf)
            FfiConverterOptionUInt16.write(swapSlippageBps, into: &buf)
            FfiConverterOptionUInt64.write(computeBudgetUnitPrice, into: &buf)
            FfiConverterOptionUInt32.write(computeBudgetUnitLimit, into: &buf)
            
        }
    }
}


public func FfiConverterTypeTransactionParameters_lift(_ buf: RustBuffer) throws -> TransactionParameters {
    return try FfiConverterTypeTransactionParameters.lift(buf)
}

public func FfiConverterTypeTransactionParameters_lower(_ value: TransactionParameters) -> RustBuffer {
    return FfiConverterTypeTransactionParameters.lower(value)
}


extension TransactionParameters: Equatable, Hashable {}



fileprivate struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeChainPrivateKey: FfiConverterRustBuffer {
    typealias SwiftType = ChainPrivateKey?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeChainPrivateKey.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeChainPrivateKey.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeChainPublicKey: FfiConverterRustBuffer {
    typealias SwiftType = ChainPublicKey?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeChainPublicKey.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeChainPublicKey.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeExternalAddress: FfiConverterRustBuffer {
    typealias SwiftType = ExternalAddress?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeExternalAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeExternalAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeTransactionParameters: FfiConverterRustBuffer {
    typealias SwiftType = TransactionParameters?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransactionParameters.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransactionParameters.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeChainPrivateKey: FfiConverterRustBuffer {
    typealias SwiftType = [ChainPrivateKey]

    public static func write(_ value: [ChainPrivateKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeChainPrivateKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ChainPrivateKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [ChainPrivateKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeChainPrivateKey.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeChainPublicKey: FfiConverterRustBuffer {
    typealias SwiftType = [ChainPublicKey]

    public static func write(_ value: [ChainPublicKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeChainPublicKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ChainPublicKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [ChainPublicKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeChainPublicKey.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeDerivedPrivateKey: FfiConverterRustBuffer {
    typealias SwiftType = [DerivedPrivateKey]

    public static func write(_ value: [DerivedPrivateKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDerivedPrivateKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DerivedPrivateKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [DerivedPrivateKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeDerivedPrivateKey.read(from: &buf))
        }
        return seq
    }
}
public func appendSignatureToTransaction(signer: String, signature: String, transaction: String) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_append_signature_to_transaction(
        FfiConverterString.lower(signer),
        FfiConverterString.lower(signature),
        FfiConverterString.lower(transaction),$0)
}
    )
}
public func decryptCiphertext(ciphertext: String, password: String) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeEncryptionError.lift) {
    uniffi_chainkit_fn_func_decrypt_ciphertext(
        FfiConverterString.lower(ciphertext),
        FfiConverterString.lower(password),$0)
}
    )
}
public func derive(chain: Blockchain, mnemonic: MnemonicWords, passphrase: String?, derivation: Derivation) throws  -> [DerivedPrivateKey] {
    return try  FfiConverterSequenceTypeDerivedPrivateKey.lift(
        try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_chainkit_fn_func_derive(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterTypeMnemonicWords.lower(mnemonic),
        FfiConverterOptionString.lower(passphrase),
        FfiConverterTypeDerivation.lower(derivation),$0)
}
    )
}
public func deriveFromData(chain: Blockchain, data: String) throws  -> DerivedPrivateKey {
    return try  FfiConverterTypeDerivedPrivateKey.lift(
        try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_chainkit_fn_func_derive_from_data(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(data),$0)
}
    )
}
public func encryptPlaintext(plaintext: String, password: String) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeEncryptionError.lift) {
    uniffi_chainkit_fn_func_encrypt_plaintext(
        FfiConverterString.lower(plaintext),
        FfiConverterString.lower(password),$0)
}
    )
}
public func generateMnemonic(length: UInt32) throws  -> MnemonicWords {
    return try  FfiConverterTypeMnemonicWords.lift(
        try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_chainkit_fn_func_generate_mnemonic(
        FfiConverterUInt32.lower(length),$0)
}
    )
}
public func getAssociatedTokenAddress(walletAddress: String, ownerProgram: String, tokenMintAddress: String) throws  -> ChainPublicKey {
    return try  FfiConverterTypeChainPublicKey.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_get_associated_token_address(
        FfiConverterString.lower(walletAddress),
        FfiConverterString.lower(ownerProgram),
        FfiConverterString.lower(tokenMintAddress),$0)
}
    )
}
public func getMessage(transaction: String) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_get_message(
        FfiConverterString.lower(transaction),$0)
}
    )
}
public func getProgramAddress(seeds: [String], program: String) throws  -> ChainPublicKey {
    return try  FfiConverterTypeChainPublicKey.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_get_program_address(
        FfiConverterSequenceString.lower(seeds),
        FfiConverterString.lower(program),$0)
}
    )
}
public func isValid(chain: Blockchain, address: String)  -> Bool {
    return try!  FfiConverterBool.lift(
        try! rustCall() {
    uniffi_chainkit_fn_func_is_valid(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(address),$0)
}
    )
}
public func modifyTransaction(chain: Blockchain, transaction: String, owner: ChainPrivateKey, parameters: TransactionParameters) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_modify_transaction(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(transaction),
        FfiConverterTypeChainPrivateKey.lower(owner),
        FfiConverterTypeTransactionParameters.lower(parameters),$0)
}
    )
}
public func parsePrivateKey(key: String)  -> ChainPrivateKey? {
    return try!  FfiConverterOptionTypeChainPrivateKey.lift(
        try! rustCall() {
    uniffi_chainkit_fn_func_parse_private_key(
        FfiConverterString.lower(key),$0)
}
    )
}
public func parsePublicKey(address: String)  -> ChainPublicKey? {
    return try!  FfiConverterOptionTypeChainPublicKey.lift(
        try! rustCall() {
    uniffi_chainkit_fn_func_parse_public_key(
        FfiConverterString.lower(address),$0)
}
    )
}
public func parseTransaction(chain: Blockchain, transaction: String) throws  -> ParsedTransaction {
    return try  FfiConverterTypeParsedTransaction.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_parse_transaction(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(transaction),$0)
}
    )
}
public func rawPrivateKey(chain: Blockchain, key: String) throws  -> ChainPrivateKey {
    return try  FfiConverterTypeChainPrivateKey.lift(
        try rustCallWithError(FfiConverterTypeKeyError.lift) {
    uniffi_chainkit_fn_func_raw_private_key(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(key),$0)
}
    )
}
public func sendTransaction(chain: Blockchain, sender: ChainPublicKey, receiver: ChainPublicKey, amount: DecimalNumber, parameters: TransactionParameters) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_send_transaction(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterTypeChainPublicKey.lower(sender),
        FfiConverterTypeChainPublicKey.lower(receiver),
        FfiConverterTypeDecimalNumber.lower(amount),
        FfiConverterTypeTransactionParameters.lower(parameters),$0)
}
    )
}
public func signMessage(chain: Blockchain, message: String, signers: [ChainPrivateKey]) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_sign_message(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(message),
        FfiConverterSequenceTypeChainPrivateKey.lower(signers),$0)
}
    )
}
public func signTransaction(chain: Blockchain, transaction: String, signers: [ChainPrivateKey], parameters: TransactionParameters?) throws  -> ChainTransaction {
    return try  FfiConverterTypeChainTransaction.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_sign_transaction(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(transaction),
        FfiConverterSequenceTypeChainPrivateKey.lower(signers),
        FfiConverterOptionTypeTransactionParameters.lower(parameters),$0)
}
    )
}
public func signTypedData(chain: Blockchain, typedData: String, signers: [ChainPrivateKey]) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_sign_typed_data(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterString.lower(typedData),
        FfiConverterSequenceTypeChainPrivateKey.lower(signers),$0)
}
    )
}
public func tokenTransaction(chain: Blockchain, destination: TokenDestination, owner: ChainPublicKey, token: ChainPublicKey, kind: TransactionKind, parameters: TransactionParameters) throws  -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeTransactionError.lift) {
    uniffi_chainkit_fn_func_token_transaction(
        FfiConverterTypeBlockchain.lower(chain),
        FfiConverterTypeTokenDestination.lower(destination),
        FfiConverterTypeChainPublicKey.lower(owner),
        FfiConverterTypeChainPublicKey.lower(token),
        FfiConverterTypeTransactionKind.lower(kind),
        FfiConverterTypeTransactionParameters.lower(parameters),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_chainkit_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_chainkit_checksum_func_append_signature_to_transaction() != 30829) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_decrypt_ciphertext() != 29) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_derive() != 1524) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_derive_from_data() != 63262) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_encrypt_plaintext() != 12131) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_generate_mnemonic() != 2201) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_get_associated_token_address() != 35153) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_get_message() != 60832) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_get_program_address() != 25842) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_is_valid() != 22697) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_modify_transaction() != 42466) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_parse_private_key() != 20409) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_parse_public_key() != 39267) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_parse_transaction() != 46478) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_raw_private_key() != 30293) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_send_transaction() != 14183) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_sign_message() != 56256) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_sign_transaction() != 3589) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_sign_typed_data() != 9261) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chainkit_checksum_func_token_transaction() != 20399) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}